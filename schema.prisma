datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime?  @default(now())
  updatedAt      DateTime?  @updatedAt

  accounts      Account[]
  orders        Order[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  role          Role            @default(USER)
  Review        Review[]
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createdAt       DateTime          @default(now())
  paymentIntentId String            @unique
  products        CartProductType[]
  address         Adress?
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   
  rating    Int
  comment   String?
  createdAt DateTime? @default(now())

  // product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, productId])
}

model Product {
  id         String @id @default(uuid()) @map("_id")
  title        String
  description String
  category    String
  brand       String?
  price       Float
  stock       Int?
  inStock     Boolean?
  quantity   Int?
  images      Image[] 
  availabilityStatus String?  
  reviews ProductReview[]
}

type CartProductType {
  id          String
  name        String
  description String
  category    String
  brand       String?
  price       Float
  selectedImg Image
  quantity    Int
  stock       Int?
}

type Image {
  color     String?
  colorCode String?
  image     String
  alt       String
}

type Adress {
  city        String
  state       String?
  country     String
  postal_code String
  line1       String
  line2       String?
}

type ProductReview {
  id String
  userId String
  productId String
  rating Int
  comment String?
  createdDate DateTime? @default(now())
  date   DateTime? @default(now())
  reviewerName String?
  reviewerEmail String?
  user ProductUser
}

type ProductUser {
    id String
    name String
    email String
    emailVerified Boolean?
    image String?
    hashedPassword String?
    createdAt DateTime? @default(now())
    updatedAt DateTime? @default(now())
    role String  
}